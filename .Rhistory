1, by = 0.25)))
summary(tune.out)
set.seed(8112)
svm.poly = svm(Purchase ~ ., data = OJ.train, kernel = "poly", degree = 2)
summary(svm.poly)
set.seed(322)
tune.out = tune(svm, Purchase ~ ., data = OJ.train, kernel = "poly", degree = 2,
ranges = list(cost = 10^seq(-2, 1, by = 0.25)))
summary(tune.out)
?USArrests
View(USArrests)
summary(USArrests)
Row.names(USArrests)
row.names(USArrests)
row.names(USArrests)->states
names(USArrests)
colnames(USArrests)
?apply
apply(USArrests,2,mean)
pr.out=prcomp(USArrests,scale=T)
names(pr.out)
pr.out$center
pr.out$scale
pr.out$rotation
pr.out$x
biplot(pr.out,scale=0)
biplot(pr.out,scale=1)
biplot(pr.out,scale=2)
biplot(pr.out,scale=1)
biplot(pr.out,scale=0)
pr.out$rotation=-pr.out$rotation
pr.out$x=-pr.out$x
biplot(pr.out,scale=0)
pr.out$sdev
set.seed(2)
x=matrix(rnorm(50*2),ncol=2)
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x[1:25,2]-4
km.out=kmeans(x,2,nstart = 20)
km.out
km.out$withinss
km.out$tot.withinss
plot(x,col=(km.out$cluster+1),pch=20,cex=2)
km.out=kmeans(x,3,nstart = 20)
km.out$withinss
km.out
plot(x,col=(km.out$cluster+1),pch=20,cex=2)
hc.complete=hclust(dist(x),method = "complete")
?dist
hc.complete=hclust(x,method = "complete")
hc.complete=hclust(dist(x),method = "complete")
hc.average=hclust(dist(x),method = "average")
hc.single=hclust(dist(x),method = "single")
plot(hc.complete,main="Complete linkage",cex=0.9)
plot(hc.average,main="Average linkage",cex=0.9)
plot(hc.single,main="Single linkage",cex=0.9)
cutree(hc.average,2)
?t
x=matrix(rnorm(30*3),bcol=3)
x=matrix(rnorm(30*3),ncol=3)
dd=as.dist(1-cor(t(x)))
dd
?cor
cor
?cor
h=hclust(dd,method="complete")
plot(h)
h1=hclust(dist(x),method="complete")
plot(h1)
library("ISLR", lib.loc="~/R/win-library/3.3")
library("ISLR", lib.loc="~/R/win-library/3.3")
library("MASS", lib.loc="C:/Program Files/R/R-3.3.1/library")
lm.fit=lm(medv~lstat+age,data=Boston)
lm.fit
summary(lm.fit)
dim(Boston)
attach(Auto)
lm.fit = lm(mpg ~ horsepower)
summary(lm.fit)
predict(lm.fit, data.frame(horsepower=c(98)), interval="confidence")
predict(lm.fit, data.frame(horsepower=c(90,98)), interval="confidence")
predict(lm.fit, data.frame(horsepower=c(98)), interval="prediction")
predict(lm.fit, data.frame(horsepower=c(90,98)), interval="prediction")
detach("package:MASS", unload=TRUE)
attach(Auto)
lm.fit = lm(mpg ~ horsepower)
summary(lm.fit)
?lm
?glm
set.seed(1)
y = rnorm(100)
x = rnorm(100)
y = x - 2 * x^2 + rnorm(100)
plot(x, y)
Data = data.frame(x, y)
set.seed(1)
# i.
glm.fit = glm(y ~ x)
cv.glm(Data, glm.fit)$delta
library("MASS", lib.loc="C:/Program Files/R/R-3.3.1/library")
Data = data.frame(x, y)
set.seed(1)
# i.
glm.fit = glm(y ~ x)
cv.glm(Data, glm.fit)$delta
detach("package:MASS", unload=TRUE)
library("boot", lib.loc="C:/Program Files/R/R-3.3.1/library")
Data = data.frame(x, y)
set.seed(1)
# i.
glm.fit = glm(y ~ x)
cv.glm(Data, glm.fit)$delta
library (gam)
gam.m3=gam(wage∼s(year ,4)+s(age ,5)+education ,data=Wage)
par(mfrow =c(1,3))
plot(gam.m3, se=TRUE ,col ="blue ")
gam1=lm(wage∼ns(year ,4)+ns(age ,5) +education ,data=Wage)
plot.gam(gam1 , se=TRUE , col ="red ")
?cut
a=cut(age,2)
attach(Wage)
a=cut(age,2)
a
a=cut(age,8)
a
library (tree)
library (ISLR)
attach (Carseats )
High=ifelse (Sales <=8," No"," Yes ")
Carseats =data.frame(Carseats ,High)
tree.carseats =tree(High∼.-Sales ,Carseats )
summary (tree.carseats )
plot(tree.carseats )
text(tree.carseats ,pretty =0)
tree.carseats
Carseats$ShelveLoc
Carseats$ShelveLoc==Good
Carseats$ShelveLoc=="Good"
sum(Carseats$ShelveLoc=="Good")
nrow(Carseats)
85/400
High
High(Carseats$ShelveLoc=="Good")
High[Carseats$ShelveLoc=="Good"]
High[Carseats$ShelveLoc=="Good"]=="Yes"
High[Carseats$ShelveLoc=="Good"]=="Yes "
High[Carseats$ShelveLoc=="Good"]==" Yes "
sum(High[Carseats$ShelveLoc!="Good"]==" Yes ")
sum(High[Carseats$ShelveLoc!="Good"])
sum(High[Carseats$ShelveLoc=="Good"])
sum([Carseats$ShelveLoc=="Good"])
sum(Carseats$ShelveLoc=="Good")
sum(!Carseats$ShelveLoc=="Good")
High[!Carseats$ShelveLoc=="Good"]
sum(High[!Carseats$ShelveLoc=="Good"]==" No")
217/315
library (randomForest)
set.seed (1)
bag.boston =randomForest(medv∼.,data=Boston ,subset =train ,mtry=13, importance =TRUE)
bag.boston
library("ISLR", lib.loc="~/R/win-library/3.3")
library (randomForest)
set.seed (1)
bag.boston =randomForest(medv∼.,data=Boston ,subset =train ,mtry=13, importance =TRUE)
bag.boston
library("MASS", lib.loc="C:/Program Files/R/R-3.3.1/library")
library (randomForest)
set.seed (1)
bag.boston =randomForest(medv∼.,data=Boston ,subset =train ,mtry=13, importance =TRUE)
bag.boston
library (randomForest)
set.seed (1)
bag.boston =randomForest(medv∼.,data=Boston ,subset =train ,mtry=13, importance =TRUE)
bag.boston =randomForest(medv∼.,data=Boston, subset =train, mtry=13, importance =TRUE)
train = sample (1: nrow(Boston ), nrow(Boston )/2)
bag.boston =randomForest(medv∼.,data=Boston, subset =train, mtry=13, importance =TRUE)
bag.boston=randomForest(medv∼.,data=Boston, subset =train, mtry=13, importance =TRUE)
bag.boston
yhat.bag = predict (bag.boston ,newdata =Boston [-train ,])
plot(yhat.bag , boston .test)
boston .test=Boston [-train ," medv"]
boston.test=Boston [-train ,"medv"]
plot(yhat.bag, boston.test)
abline (0,1)
mean(( yhat.bag -boston .test)^2)
mean(( yhat.bag -boston.test)^2)
> varImpPlot (rf.boston )
varImpPlot (rf.boston )
rf.boston =randomForest(medv∼.,data=Boston ,subset =train ,
mtry=6, importance =TRUE)
varImpPlot (rf.boston )
set.seed (1)
x=matrix (rnorm (20*2) , ncol =2)
y=c(rep (-1,10) , rep (1 ,10) )
x[y==1 ,]= x[y==1,] + 1
plot(x, col =(3-y))
dat=data.frame(x=x, y=as.factor (y))
library (e1071)
svmfit =svm(y∼., data=dat , kernel =" linear ", cost =10,
scale =FALSE )
svmfit =svm(y∼., data=dat , kernel ="linear", cost =10,
scale =FALSE )
plot(svmfit , dat)
summary(svmfit)
svmfit =svm(y∼., data=dat , kernel ="linear", cost =10, scale =FALSE )
svmfit =svm(y∼., data=dat , kernel ="linear", cost =1, scale =FALSE )
plot(svmfit , dat)
svmfit =svm(y∼., data=dat , kernel ="linear", cost =10, scale =FALSE )
plot(svmfit , dat)
set.seed (1)
tune.out=tune(svm ,y∼.,data=dat ,kernel ="linear", ranges =list(cost=c(0.001 , 0.01, 0.1, 1,5,10,100)))
summary(tune.out)
tune.out$best.model
set.seed (1)
x=rbind(x, matrix (rnorm (50*2) , ncol =2))
y=c(y, rep (0 ,50) )
x[y==0 ,2]= x[y==0 ,2]+2
dat=data.frame(x=x, y=as.factor (y))
par(mfrow =c(1,1))
plot(x,col =(y+1))
svmfit =svm(y∼., data=dat , kernel ="radial", cost =10, gamma =1)
summary(y)
y
plot(x,col =0
)
plot(x,col =(y+2))
svmfit =svm(y∼., data=dat , kernel ="radial", cost =10, gamma =1)
plot(svmfit , dat)
summary(svmfit)
?prcomp
pr.out =prcomp (USArrests , scale =TRUE)
args(rnorm)
?lapply
install.packages("KernSmooth")
library("KernSmooth", lib.loc="~/R/win-library/3.3")
getwd()
version()
?version
R.version
library("swirl", lib.loc="~/R/win-library/3.3")
swirl(\)
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
>matrix
?matrix
matrix(1:20,nrow = 4,ncol = 5)
my_matrix2<-matrix(1:20,nrow = 4,ncol = 5)
identical(my_matrix,my_matrix2)
patients<c("Bill","Gina","Kelly","Sean")
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)<-cnames
my_data
for (1 in 1:10000) {}
for (i in 1:10000) {a<-i}
for (i in 1:100000) {a<-i}
for (i in 1:1000000) {a<-i}
for (i in 1:10000000) {a<-i}
for (i in 1:10000000) {a<-i}
for (i in 1:20000000) {a<-i}
?computeEstimate
>>ComputeEstimate
??ComputeEstimate
search()
x<-Sys.time()
x
p<-as.POSIXlt(x)
p
class(p)
names(p)
q<-unclass(p)
q
p<-as.POSIXct(x)
p
class(p)
names(p)
unclass(p)
p<-as.POSIXlt(x)
p$sec
names(p)
class(p)
unclass(p)
p$zone
?strptime
x<-as.Date("2012-03-01") y<-as.Date("2012-02-28")
x<-as.Date("2012-03-01")
y<-as.Date("2012-02-28")
x-y
y-x
library(swirl)
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE&FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE((6>4))
isTRUE(6>4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function()
boring_function
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("djfdf fsfsfsa")
submit()
mad_libs(place="abc", adjective="fhg", noun="dkdk")
submit()
'I' %p% 'love' %p% 'R!'
q
quit
quit()
library("swirl", lib.loc="~/R/win-library/3.3")
swirl()
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units = 'days')
x <- 1:10
if(x > 5) {
x <- 0
}
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
install.packages("RMySQL")
?connection
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "f242a1b78b4ca337919b",
secret = "32e9c5f4594dd9b9042745a5dd8da837d05c892d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "c5f7456a101eef54a6aa",
secret = "2f16a090c90cef85d0b33f8c029c2bcb0c68b9e5")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret = "6af1109f6ecf442d292425087d49bb13d9bbe9c8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
myapp <- oauth_app("github",
key = "c5f7456a101eef54a6aa",
secret = "2f16a090c90cef85d0b33f8c029c2bcb0c68b9e5")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com", gtoken)
stop_for_status(req)
content(req)
library("knitr", lib.loc="~/R/win-library/3.3")
library(datasets)
data(airquality)
head(airquality)
summary(qirquality)
summary(airquality)
x<-4; y<-3
x
y
wd<-"c:/Users/DW/proj1"
setwd(wd)
getwd()
ls
ls()
list.files()
wd<-"c:/Users/DW/proj1/RepData_proj1"
setwd(wd)
list.files()
list.files()
library("plyr")
library("knitr")
library("reshape2")
library("ggplot2")
File_Path <- "./activity.csv"
data = read.table(file = File_Path,header=T, quote="\"", sep=",")
data$date <- as.Date(data$date)
head(data)
data_NO_na <- melt(data = data,id.vars="date", measure.vars="steps", na.rm= TRUE)
steps_date <- dcast(data_NO_na, date ~ variable, sum)
head(steps_date)
plot(steps_date$date, steps_date$steps, type="h", main="Histogram of Daily Steps",xlab="Date", ylab="Steps per Day", col="black", lwd=7)
abline(h=mean(steps_date$steps), col="red", lwd=2)
plot(steps_date$date, steps_date$steps, type="h", main="Histogram of Daily Steps",xlab="Date", ylab="Steps per Day", col="black", lwd=5)
data_NO_na <- melt(data = data,id.vars="interval", measure.vars="steps", na.rm= TRUE)
interval_date <- dcast(data_NO_na, interval ~ variable, mean)
plot(interval_date$interval, interval_date$steps, type="l", main="time series Steps",xlab="interval", ylab="Average Number of Steps", col="black", lwd=2)
abline(h=mean(interval_date$steps), col="red", lwd=2)
head(steps_date$interval)
head(steps_date)
head(interval_date)
h=interval_date$interval[which(interval_date$steps == max(interval_date$steps))]
h
